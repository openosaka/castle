// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TunnelService_Register_FullMethodName = "/message.TunnelService/Register"
	TunnelService_Data_FullMethodName     = "/message.TunnelService/Data"
)

// TunnelServiceClient is the client API for TunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelServiceClient interface {
	// the client sends Register to the server to create a tunnel.
	// the server returns a stream Control to the client, the following control messages are sent through the stream.
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (TunnelService_RegisterClient, error)
	// server side: write traffic to the stream, and read traffic from the stream.
	// client side: read traffic from the stream, and write traffic to the stream.
	Data(ctx context.Context, opts ...grpc.CallOption) (TunnelService_DataClient, error)
}

type tunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelServiceClient(cc grpc.ClientConnInterface) TunnelServiceClient {
	return &tunnelServiceClient{cc}
}

func (c *tunnelServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (TunnelService_RegisterClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelService_ServiceDesc.Streams[0], TunnelService_Register_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelServiceRegisterClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TunnelService_RegisterClient interface {
	Recv() (*ControlCommand, error)
	grpc.ClientStream
}

type tunnelServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *tunnelServiceRegisterClient) Recv() (*ControlCommand, error) {
	m := new(ControlCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelServiceClient) Data(ctx context.Context, opts ...grpc.CallOption) (TunnelService_DataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelService_ServiceDesc.Streams[1], TunnelService_Data_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelServiceDataClient{ClientStream: stream}
	return x, nil
}

type TunnelService_DataClient interface {
	Send(*TrafficToServer) error
	Recv() (*TrafficToClient, error)
	grpc.ClientStream
}

type tunnelServiceDataClient struct {
	grpc.ClientStream
}

func (x *tunnelServiceDataClient) Send(m *TrafficToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelServiceDataClient) Recv() (*TrafficToClient, error) {
	m := new(TrafficToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServiceServer is the server API for TunnelService service.
// All implementations must embed UnimplementedTunnelServiceServer
// for forward compatibility
type TunnelServiceServer interface {
	// the client sends Register to the server to create a tunnel.
	// the server returns a stream Control to the client, the following control messages are sent through the stream.
	Register(*RegisterReq, TunnelService_RegisterServer) error
	// server side: write traffic to the stream, and read traffic from the stream.
	// client side: read traffic from the stream, and write traffic to the stream.
	Data(TunnelService_DataServer) error
	mustEmbedUnimplementedTunnelServiceServer()
}

// UnimplementedTunnelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServiceServer struct {
}

func (UnimplementedTunnelServiceServer) Register(*RegisterReq, TunnelService_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTunnelServiceServer) Data(TunnelService_DataServer) error {
	return status.Errorf(codes.Unimplemented, "method Data not implemented")
}
func (UnimplementedTunnelServiceServer) mustEmbedUnimplementedTunnelServiceServer() {}

// UnsafeTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServiceServer will
// result in compilation errors.
type UnsafeTunnelServiceServer interface {
	mustEmbedUnimplementedTunnelServiceServer()
}

func RegisterTunnelServiceServer(s grpc.ServiceRegistrar, srv TunnelServiceServer) {
	s.RegisterService(&TunnelService_ServiceDesc, srv)
}

func _TunnelService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TunnelServiceServer).Register(m, &tunnelServiceRegisterServer{ServerStream: stream})
}

type TunnelService_RegisterServer interface {
	Send(*ControlCommand) error
	grpc.ServerStream
}

type tunnelServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *tunnelServiceRegisterServer) Send(m *ControlCommand) error {
	return x.ServerStream.SendMsg(m)
}

func _TunnelService_Data_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServiceServer).Data(&tunnelServiceDataServer{ServerStream: stream})
}

type TunnelService_DataServer interface {
	Send(*TrafficToClient) error
	Recv() (*TrafficToServer, error)
	grpc.ServerStream
}

type tunnelServiceDataServer struct {
	grpc.ServerStream
}

func (x *tunnelServiceDataServer) Send(m *TrafficToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelServiceDataServer) Recv() (*TrafficToServer, error) {
	m := new(TrafficToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelService_ServiceDesc is the grpc.ServiceDesc for TunnelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.TunnelService",
	HandlerType: (*TunnelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _TunnelService_Register_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Data",
			Handler:       _TunnelService_Data_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/message.proto",
}
