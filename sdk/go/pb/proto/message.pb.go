// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: proto/message.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Command int32

const (
	// Init command is sent only once as the first control message to the client.
	Command_Init Command = 0
	// Work command is sent when a user connection is established,
	// then the client needs to start a Data stream to receive and send data.
	Command_Work Command = 1
)

// Enum value maps for Command.
var (
	Command_name = map[int32]string{
		0: "Init",
		1: "Work",
	}
	Command_value = map[string]int32{
		"Init": 0,
		"Work": 1,
	}
)

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}

func (x Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_message_proto_enumTypes[0].Descriptor()
}

func (Command) Type() protoreflect.EnumType {
	return &file_proto_message_proto_enumTypes[0]
}

func (x Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command.Descriptor instead.
func (Command) EnumDescriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{0}
}

type TrafficToServer_Action int32

const (
	// start to send the traffic.
	// the server expects only receiving `Start` action once.
	TrafficToServer_Start TrafficToServer_Action = 0
	// sending the traffic.
	TrafficToServer_Sending TrafficToServer_Action = 1
	// finish sending the traffic.
	// the server expects only receiving `Finished` action once.
	TrafficToServer_Finished TrafficToServer_Action = 2
	// the client sends the Close action to tell the server to close the user connection.
	// generally, when something bad happens below:
	// - can't dial the local upstream.
	TrafficToServer_Close TrafficToServer_Action = 3
)

// Enum value maps for TrafficToServer_Action.
var (
	TrafficToServer_Action_name = map[int32]string{
		0: "Start",
		1: "Sending",
		2: "Finished",
		3: "Close",
	}
	TrafficToServer_Action_value = map[string]int32{
		"Start":    0,
		"Sending":  1,
		"Finished": 2,
		"Close":    3,
	}
)

func (x TrafficToServer_Action) Enum() *TrafficToServer_Action {
	p := new(TrafficToServer_Action)
	*p = x
	return p
}

func (x TrafficToServer_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficToServer_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_message_proto_enumTypes[1].Descriptor()
}

func (TrafficToServer_Action) Type() protoreflect.EnumType {
	return &file_proto_message_proto_enumTypes[1]
}

func (x TrafficToServer_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficToServer_Action.Descriptor instead.
func (TrafficToServer_Action) EnumDescriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{3, 0}
}

type Tunnel_Type int32

const (
	Tunnel_TCP  Tunnel_Type = 0
	Tunnel_HTTP Tunnel_Type = 10
	Tunnel_UDP  Tunnel_Type = 20
)

// Enum value maps for Tunnel_Type.
var (
	Tunnel_Type_name = map[int32]string{
		0:  "TCP",
		10: "HTTP",
		20: "UDP",
	}
	Tunnel_Type_value = map[string]int32{
		"TCP":  0,
		"HTTP": 10,
		"UDP":  20,
	}
)

func (x Tunnel_Type) Enum() *Tunnel_Type {
	p := new(Tunnel_Type)
	*p = x
	return p
}

func (x Tunnel_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tunnel_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_message_proto_enumTypes[2].Descriptor()
}

func (Tunnel_Type) Type() protoreflect.EnumType {
	return &file_proto_message_proto_enumTypes[2]
}

func (x Tunnel_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tunnel_Type.Descriptor instead.
func (Tunnel_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{6, 0}
}

// Control is a stream used to control the tunnel.
type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command Command `protobuf:"varint,1,opt,name=command,proto3,enum=message.Command" json:"command,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Control_Init
	//	*Control_Work
	Payload isControl_Payload `protobuf_oneof:"payload"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{0}
}

func (x *Control) GetCommand() Command {
	if x != nil {
		return x.Command
	}
	return Command_Init
}

func (m *Control) GetPayload() isControl_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Control) GetInit() *InitPayload {
	if x, ok := x.GetPayload().(*Control_Init); ok {
		return x.Init
	}
	return nil
}

func (x *Control) GetWork() *WorkPayload {
	if x, ok := x.GetPayload().(*Control_Work); ok {
		return x.Work
	}
	return nil
}

type isControl_Payload interface {
	isControl_Payload()
}

type Control_Init struct {
	Init *InitPayload `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type Control_Work struct {
	Work *WorkPayload `protobuf:"bytes,3,opt,name=work,proto3,oneof"`
}

func (*Control_Init) isControl_Payload() {}

func (*Control_Work) isControl_Payload() {}

type InitPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelId           string   `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	AssignedEntrypoint []string `protobuf:"bytes,2,rep,name=assigned_entrypoint,json=assignedEntrypoint,proto3" json:"assigned_entrypoint,omitempty"`
}

func (x *InitPayload) Reset() {
	*x = InitPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPayload) ProtoMessage() {}

func (x *InitPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPayload.ProtoReflect.Descriptor instead.
func (*InitPayload) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{1}
}

func (x *InitPayload) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *InitPayload) GetAssignedEntrypoint() []string {
	if x != nil {
		return x.AssignedEntrypoint
	}
	return nil
}

// WorkPayload is sent when the server establishes a user connection.
type WorkPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connection_id is the unique identifier of the connection which is assigned by the server.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *WorkPayload) Reset() {
	*x = WorkPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkPayload) ProtoMessage() {}

func (x *WorkPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkPayload.ProtoReflect.Descriptor instead.
func (*WorkPayload) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{2}
}

func (x *WorkPayload) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type TrafficToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when the user connects to the remote_port, the server assigns a unique_id to this connection.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// status is the status of the traffic, when the traffic streaming starts,
	// the first message should be the Start status without data,
	// then the client sends the data with the Sending status with data,
	// finally, after the local upstream finishes the response, the client sends the Finished status without data.
	Action TrafficToServer_Action `protobuf:"varint,2,opt,name=action,proto3,enum=message.TrafficToServer_Action" json:"action,omitempty"`
	// data is the traffic data.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TrafficToServer) Reset() {
	*x = TrafficToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficToServer) ProtoMessage() {}

func (x *TrafficToServer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficToServer.ProtoReflect.Descriptor instead.
func (*TrafficToServer) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{3}
}

func (x *TrafficToServer) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *TrafficToServer) GetAction() TrafficToServer_Action {
	if x != nil {
		return x.Action
	}
	return TrafficToServer_Start
}

func (x *TrafficToServer) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TrafficToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TrafficToClient) Reset() {
	*x = TrafficToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficToClient) ProtoMessage() {}

func (x *TrafficToClient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficToClient.ProtoReflect.Descriptor instead.
func (*TrafficToClient) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{4}
}

func (x *TrafficToClient) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnel *Tunnel `protobuf:"bytes,1,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterReq) GetTunnel() *Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

// Each tunnel is a bidirectional connection between the client and the server.
// Basically, one tunnel corresponds to one http2 connection.
type Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the tunnel,
	// it's assigned by the server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the name of the tunnel.
	Name string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type Tunnel_Type `protobuf:"varint,3,opt,name=type,proto3,enum=message.Tunnel_Type" json:"type,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Tunnel_Tcp
	//	*Tunnel_Http
	//	*Tunnel_Udp
	Config isTunnel_Config `protobuf_oneof:"config"`
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{6}
}

func (x *Tunnel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tunnel) GetType() Tunnel_Type {
	if x != nil {
		return x.Type
	}
	return Tunnel_TCP
}

func (m *Tunnel) GetConfig() isTunnel_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Tunnel) GetTcp() *TCPConfig {
	if x, ok := x.GetConfig().(*Tunnel_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *Tunnel) GetHttp() *HTTPConfig {
	if x, ok := x.GetConfig().(*Tunnel_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Tunnel) GetUdp() *UDPConfig {
	if x, ok := x.GetConfig().(*Tunnel_Udp); ok {
		return x.Udp
	}
	return nil
}

type isTunnel_Config interface {
	isTunnel_Config()
}

type Tunnel_Tcp struct {
	Tcp *TCPConfig `protobuf:"bytes,4,opt,name=tcp,proto3,oneof"`
}

type Tunnel_Http struct {
	Http *HTTPConfig `protobuf:"bytes,5,opt,name=http,proto3,oneof"`
}

type Tunnel_Udp struct {
	Udp *UDPConfig `protobuf:"bytes,6,opt,name=udp,proto3,oneof"`
}

func (*Tunnel_Tcp) isTunnel_Config() {}

func (*Tunnel_Http) isTunnel_Config() {}

func (*Tunnel_Udp) isTunnel_Config() {}

// HttpConfig is used to tell the server how to create the http listener,
// and how to route the request.
//
// these three fields are exclusive.
type HTTPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the server's public domain is https://castled.dev,
	// you may configure a subdomain https://monitor.castled.dev,
	// then the request matches the subdomain will be forwarded to the related
	// tunnel.
	//
	// if domain is not empty, the server will ignore the rest of the fields.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the server assigns https://{subdomain}.{domain} as the entrypoint for the
	// tunnel.
	//
	// if subdomain is not empty, the server will ignore the rest of the fields.
	Subdomain string `protobuf:"bytes,2,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	// if random_subdomain is true, the server will assign a random subdomain.
	RandomSubdomain bool `protobuf:"varint,3,opt,name=random_subdomain,json=randomSubdomain,proto3" json:"random_subdomain,omitempty"`
	// random_port is the lowest priority option, the server will assign a random port
	// if the remote_port is empty.
	// the server will listen on the remote_port to accept the http request.
	RemotePort int32 `protobuf:"varint,4,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
}

func (x *HTTPConfig) Reset() {
	*x = HTTPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConfig) ProtoMessage() {}

func (x *HTTPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConfig.ProtoReflect.Descriptor instead.
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{7}
}

func (x *HTTPConfig) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HTTPConfig) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *HTTPConfig) GetRandomSubdomain() bool {
	if x != nil {
		return x.RandomSubdomain
	}
	return false
}

func (x *HTTPConfig) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

type TCPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if remote_port is empty, the server will assign a random port.
	RemotePort int32 `protobuf:"varint,1,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
}

func (x *TCPConfig) Reset() {
	*x = TCPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPConfig) ProtoMessage() {}

func (x *TCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPConfig.ProtoReflect.Descriptor instead.
func (*TCPConfig) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{8}
}

func (x *TCPConfig) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

type UDPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if remote_port is empty, the server will assign a random port.
	RemotePort int32 `protobuf:"varint,1,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
}

func (x *UDPConfig) Reset() {
	*x = UDPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDPConfig) ProtoMessage() {}

func (x *UDPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDPConfig.ProtoReflect.Descriptor instead.
func (*UDPConfig) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{9}
}

func (x *UDPConfig) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

var File_proto_message_proto protoreflect.FileDescriptor

var file_proto_message_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x98,
	0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5b, 0x0a, 0x0b, 0x49, 0x6e, 0x69,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x39, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x03, 0x22, 0x25, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x36, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x06, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x43, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x44,
	0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x75, 0x64, 0x70, 0x22, 0x22,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50,
	0x10, 0x14, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8e, 0x01, 0x0a,
	0x0a, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2c, 0x0a,
	0x09, 0x54, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2c, 0x0a, 0x09, 0x55,
	0x44, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2a, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x57, 0x6f, 0x72, 0x6b, 0x10, 0x01, 0x32, 0x89, 0x01, 0x0a, 0x0d, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x64, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x63,
	0x61, 0x73, 0x74, 0x6c, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_message_proto_rawDescOnce sync.Once
	file_proto_message_proto_rawDescData = file_proto_message_proto_rawDesc
)

func file_proto_message_proto_rawDescGZIP() []byte {
	file_proto_message_proto_rawDescOnce.Do(func() {
		file_proto_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_message_proto_rawDescData)
	})
	return file_proto_message_proto_rawDescData
}

var file_proto_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_message_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_message_proto_goTypes = []any{
	(Command)(0),                // 0: message.Command
	(TrafficToServer_Action)(0), // 1: message.TrafficToServer.Action
	(Tunnel_Type)(0),            // 2: message.Tunnel.Type
	(*Control)(nil),             // 3: message.Control
	(*InitPayload)(nil),         // 4: message.InitPayload
	(*WorkPayload)(nil),         // 5: message.WorkPayload
	(*TrafficToServer)(nil),     // 6: message.TrafficToServer
	(*TrafficToClient)(nil),     // 7: message.TrafficToClient
	(*RegisterReq)(nil),         // 8: message.RegisterReq
	(*Tunnel)(nil),              // 9: message.Tunnel
	(*HTTPConfig)(nil),          // 10: message.HTTPConfig
	(*TCPConfig)(nil),           // 11: message.TCPConfig
	(*UDPConfig)(nil),           // 12: message.UDPConfig
}
var file_proto_message_proto_depIdxs = []int32{
	0,  // 0: message.Control.command:type_name -> message.Command
	4,  // 1: message.Control.init:type_name -> message.InitPayload
	5,  // 2: message.Control.work:type_name -> message.WorkPayload
	1,  // 3: message.TrafficToServer.action:type_name -> message.TrafficToServer.Action
	9,  // 4: message.RegisterReq.tunnel:type_name -> message.Tunnel
	2,  // 5: message.Tunnel.type:type_name -> message.Tunnel.Type
	11, // 6: message.Tunnel.tcp:type_name -> message.TCPConfig
	10, // 7: message.Tunnel.http:type_name -> message.HTTPConfig
	12, // 8: message.Tunnel.udp:type_name -> message.UDPConfig
	8,  // 9: message.TunnelService.Register:input_type -> message.RegisterReq
	6,  // 10: message.TunnelService.Data:input_type -> message.TrafficToServer
	3,  // 11: message.TunnelService.Register:output_type -> message.Control
	7,  // 12: message.TunnelService.Data:output_type -> message.TrafficToClient
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_message_proto_init() }
func file_proto_message_proto_init() {
	if File_proto_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*InitPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*WorkPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TrafficToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TrafficToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HTTPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TCPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UDPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_message_proto_msgTypes[0].OneofWrappers = []any{
		(*Control_Init)(nil),
		(*Control_Work)(nil),
	}
	file_proto_message_proto_msgTypes[6].OneofWrappers = []any{
		(*Tunnel_Tcp)(nil),
		(*Tunnel_Http)(nil),
		(*Tunnel_Udp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_message_proto_goTypes,
		DependencyIndexes: file_proto_message_proto_depIdxs,
		EnumInfos:         file_proto_message_proto_enumTypes,
		MessageInfos:      file_proto_message_proto_msgTypes,
	}.Build()
	File_proto_message_proto = out.File
	file_proto_message_proto_rawDesc = nil
	file_proto_message_proto_goTypes = nil
	file_proto_message_proto_depIdxs = nil
}
