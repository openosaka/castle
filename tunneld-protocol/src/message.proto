syntax = "proto3";

package message;

service TunnelService {
  // the client sends Register to the server to create a tunnel.
  // the server returns a stream Control to the client, the following control messages are sent through the stream.
  rpc Register(RegisterReq) returns (stream Control) {}

  // server side: write traffic to the stream, and read traffic from the stream.
  // client side: read traffic from the stream, and write traffic to the stream.
  rpc Data(stream TrafficToServer) returns (stream TrafficToClient) {}
}

enum Command {
  // Init command is sent only once as the first control message to the client.
  Init = 0;
  // Work command is sent when a user connection is established,
  // then the client needs to start a Data stream to receive and send data.
  Work = 1;
}

// Control is a stream used to control the tunnel.
message Control {
  Command command = 1;

  oneof payload {
    InitPayload init = 2;
    WorkPayload work = 3;
  }
}

message InitPayload {
  string server_version = 1;
  string tunnel_id = 2;
  string assigned_entrypoint = 3;
}

// WorkPayload is sent when the server establishes a user connection.
message WorkPayload {
  // connection_id is the unique identifier of the connection which is assigned by the server.
  string connection_id = 1;
}

message TrafficToServer {
  enum Action {
    // start to send the traffic.
    // the server expects only receiving `Start` action once.
    Start = 0;
    // sending the traffic.
    Sending = 1;
    // finish sending the traffic.
    // the server expects only receiving `Finished` action once.
    Finished = 2;
    // the client sends the Close action to tell the server to close the user connection. 
    // generally, when something bad happens below:
    // - can't dial the local upstream.
    Close = 3;
  }

  // when the user connects to the remote_port, the server assigns a unique_id to this connection.
  string connection_id = 1;
  // status is the status of the traffic, when the traffic streaming starts,
  // the first message should be the Start status without data,
  // then the client sends the data with the Sending status with data,
  // finally, after the local upstream finishes the response, the client sends the Finished status without data.
  Action action = 2;

  // data is the traffic data.
  bytes data = 3;
}

message TrafficToClient {
  bytes data = 1;
}

message RegisterReq {
  string client_version = 1;
  Tunnel tunnel = 2;
}

// Each tunnel is a bidirectional connection between the client and the server.
// Basically, one tunnel corresponds to one http2 connection.
message Tunnel {
  // id is the unique identifier of the tunnel,
  // it's assigned by the server.
  string id = 1;
  // name is the name of the tunnel.
  string name = 2;

  enum Type {
    TCP = 0;
    HTTP = 10;
  }

  Type type = 3;

  oneof config {
    HTTPConfig http = 4;
    TCPConfig tcp = 5;
  }
}

// HttpConfig is used to tell the server how to create the http listener,
// and how to route the request.
//
// these three fields are exclusive.
message HTTPConfig {
  // the server will listen on the remote_port to accept the http request.
  int32 remote_port = 1;
  // the server assigns https://{subdomain}.{domain} as the entrypoint for the
  // tunnel.
  string subdomain = 2;
  // the server's public domain is https://tunneld.dev,
  // you may configure a subdomain https://monitor.tunneld.dev,
  // then the request matches the subdomain will be forwarded to the related
  // tunnel.
  string domain = 3;
}

message TCPConfig { int32 remote_port = 1; }
